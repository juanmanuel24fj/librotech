{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Reserva } from '../model/reserva.model';\nimport { Libro } from '../model/libro.model';\nimport { User } from '../model/user.model';\nexport let ReservaComponent = class ReservaComponent {\n  constructor(reservaService) {\n    this.reservaService = reservaService;\n    this.reservas = [];\n    this.nuevaReserva = new Reserva(0, new Libro(0, '', '', 0, ''), new User(0, '', '', ''), new Date(), new Date());\n  }\n  ngOnInit() {\n    this.obtenerReservas();\n  }\n  obtenerReservas() {\n    this.reservaService.obtenerReservas().subscribe(data => {\n      this.reservas = data;\n    });\n  }\n  crearReserva() {\n    this.reservaService.crearReserva(this.nuevaReserva).subscribe(data => {\n      this.reservas.push(data);\n      this.nuevaReserva = new Reserva(0, new Libro(0, '', '', 0, ''), new User(0, '', '', ''), new Date(), new Date());\n    }, error => {\n      console.error('Error al crear la reserva', error);\n      alert('Error al crear la reserva');\n    });\n  }\n  eliminarReserva(reservaId) {\n    this.reservaService.eliminarReserva(reservaId).subscribe(() => {\n      // Si la eliminación tiene éxito, incrementa el contador de ejemplares disponibles\n      this.libro.ejemplaresDisponibles++;\n      // Actualiza la interfaz de usuario para reflejar el cambio\n      this.actualizarContadorEjemplaresDisponibles();\n      // Muestra un mensaje de éxito\n      this.alertService.mostrarMensaje('Reserva eliminada correctamente.');\n    }, error => {\n      // Manejar errores\n      console.error('Error al eliminar la reserva:', error);\n    });\n  }\n  devolverLibro(reservaId) {\n    // Lógica para devolver la reserva en el backend\n    this.reservaService.devolverReserva(reservaId).subscribe(() => {\n      // Si la devolución tiene éxito, incrementa el contador de ejemplares disponibles\n      this.libro.ejemplaresDisponibles++;\n      // Actualiza la interfaz de usuario para reflejar el cambio\n      this.actualizarContadorEjemplaresDisponibles();\n      // Muestra un mensaje de éxito\n      this.alertService.mostrarMensaje('Libro devuelto correctamente.');\n      // Elimina la reserva de la lista localmente\n      this.reservas = this.reservas.filter(reserva => reserva.id !== reservaId);\n    }, error => {\n      // Manejar errores\n      console.error('Error al devolver el libro:', error);\n    });\n  }\n  actualizarContadorEjemplaresDisponibles() {\n    // Lógica para actualizar el contador en la interfaz de usuario\n  }\n};\nReservaComponent = __decorate([Component({\n  selector: 'app-reserva',\n  templateUrl: './reserva.component'\n})], ReservaComponent);","map":{"version":3,"names":["Component","Reserva","Libro","User","ReservaComponent","constructor","reservaService","reservas","nuevaReserva","Date","ngOnInit","obtenerReservas","subscribe","data","crearReserva","push","error","console","alert","eliminarReserva","reservaId","libro","ejemplaresDisponibles","actualizarContadorEjemplaresDisponibles","alertService","mostrarMensaje","devolverLibro","devolverReserva","filter","reserva","id","__decorate","selector","templateUrl"],"sources":["C:\\Users\\Juanma\\Documents\\GitHub\\librotech\\src\\app\\componentes\\reserva.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ReservaService } from '../services/reserva.service';\r\nimport { Reserva } from '../model/reserva.model';\r\nimport { Libro } from '../model/libro.model';\r\nimport { User } from '../model/user.model';\r\n\r\n@Component({\r\n  selector: 'app-reserva',\r\n  templateUrl: './reserva.component'\r\n})\r\nexport class ReservaComponent implements OnInit {\r\n  reservas: Reserva[] = [];\r\n  nuevaReserva: Reserva = new Reserva(\r\n    0, \r\n    new Libro(0, '', '', 0, ''), \r\n    new User(0, '', '',''), \r\n    new Date(), \r\n    new Date());\r\n  alertService: any;\r\n  libro: any;\r\n\r\n  constructor(private reservaService: ReservaService) {}\r\n\r\n  ngOnInit() {\r\n    this.obtenerReservas();\r\n  }\r\n\r\n  obtenerReservas() {\r\n    this.reservaService.obtenerReservas().subscribe(data => {\r\n      this.reservas = data;\r\n    });\r\n  }\r\n\r\n  crearReserva(): void {\r\n    this.reservaService.crearReserva(this.nuevaReserva).subscribe(data => {\r\n      this.reservas.push(data);\r\n      this.nuevaReserva = new Reserva(0, new Libro(0, '', '', 0, ''), new User(0, '', '',''), new Date(), new Date());\r\n    }, error => {\r\n      console.error('Error al crear la reserva', error);\r\n      alert('Error al crear la reserva');\r\n    });\r\n  }\r\n  \r\n  eliminarReserva(reservaId: number): void {\r\n    this.reservaService.eliminarReserva(reservaId).subscribe(\r\n      () => {\r\n        // Si la eliminación tiene éxito, incrementa el contador de ejemplares disponibles\r\n        this.libro.ejemplaresDisponibles++;\r\n        // Actualiza la interfaz de usuario para reflejar el cambio\r\n        this.actualizarContadorEjemplaresDisponibles();\r\n        // Muestra un mensaje de éxito\r\n        this.alertService.mostrarMensaje('Reserva eliminada correctamente.');\r\n      },\r\n      error => {\r\n        // Manejar errores\r\n        console.error('Error al eliminar la reserva:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  devolverLibro(reservaId: number): void {\r\n    // Lógica para devolver la reserva en el backend\r\n    this.reservaService.devolverReserva(reservaId).subscribe(\r\n      () => {\r\n        // Si la devolución tiene éxito, incrementa el contador de ejemplares disponibles\r\n        this.libro.ejemplaresDisponibles++;\r\n        // Actualiza la interfaz de usuario para reflejar el cambio\r\n        this.actualizarContadorEjemplaresDisponibles();\r\n        // Muestra un mensaje de éxito\r\n        this.alertService.mostrarMensaje('Libro devuelto correctamente.');\r\n        // Elimina la reserva de la lista localmente\r\n        this.reservas = this.reservas.filter(reserva => reserva.id !== reservaId);\r\n      },\r\n      error => {\r\n        // Manejar errores\r\n        console.error('Error al devolver el libro:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  actualizarContadorEjemplaresDisponibles(): void {\r\n    // Lógica para actualizar el contador en la interfaz de usuario\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}