{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://librotech-api.onrender.com/api/usuario';\n    this.usuarioAutenticado = false;\n  }\n  register(username, password, email) {\n    const user = {\n      username,\n      password,\n      email\n    };\n    return this.http.post(`${this.apiUrl}/registro`, user);\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      username,\n      password\n    }).pipe(tap({\n      error: error => {\n        console.error('Login failed', error);\n      }\n    }));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["tap","AuthService","constructor","http","apiUrl","usuarioAutenticado","register","username","password","email","user","post","login","pipe","error","console","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Juanma\\Documents\\GitHub\\librotech\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { User } from '../model/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n\r\n  private apiUrl = 'https://librotech-api.onrender.com/api/usuario'; \r\n  private usuarioAutenticado: boolean = false;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  register(username: string, password: string, email: string): Observable<any> {\r\n    const user = { username, password, email };\r\n    return this.http.post<any>(`${this.apiUrl}/registro`, user);\r\n  }\r\n  login(username: string, password: string): Observable<User> {\r\n    return this.http.post<User>(`${this.apiUrl}/login`, { username, password }).pipe(\r\n      tap({\r\n        error: (error) => {\r\n          console.error('Login failed', error);\r\n        }\r\n      })\r\n    );\r\n  }\r\n  \r\n}\r\n\r\n"],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAMtC,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,MAAM,GAAG,gDAAgD;IACzD,KAAAC,kBAAkB,GAAY,KAAK;EAEH;EAExCC,QAAQA,CAACC,QAAgB,EAAEC,QAAgB,EAAEC,KAAa;IACxD,MAAMC,IAAI,GAAG;MAAEH,QAAQ;MAAEC,QAAQ;MAAEC;IAAK,CAAE;IAC1C,OAAO,IAAI,CAACN,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACP,MAAM,WAAW,EAAEM,IAAI,CAAC;EAC7D;EACAE,KAAKA,CAACL,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACL,IAAI,CAACQ,IAAI,CAAO,GAAG,IAAI,CAACP,MAAM,QAAQ,EAAE;MAAEG,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACK,IAAI,CAC9Eb,GAAG,CAAC;MACFc,KAAK,EAAGA,KAAK,IAAI;QACfC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACtC;KACD,CAAC,CACH;EACH;EAAC,QAAAE,CAAA,G;qBApBUf,WAAW,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXpB,WAAW;IAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}